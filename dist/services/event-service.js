class EventService{constructor(){this.defaultPage="events"}init(){this.renderEvents()}renderEvents=e=>{const t=document.querySelector("#events"),a=(t.querySelector(".event-modal-wrapper").querySelector(".modal"),t.querySelector(".add-event-modal")),l=a.querySelector(".modal"),n=t.querySelector(".add-event-modal .form"),d=t.querySelector(".add-event-close"),i=t.querySelector(".edit-event-modal"),o=i.querySelector(".modal"),s=t.querySelector(".edit-event-modal .form"),c=t.querySelector(".edit-event-close"),r=t.querySelector(".event__list"),v=db.collection("events"),u=t.querySelector(".add-event");let m;const p=()=>{l.style.cssText="animation: slideDown .5s ease; animation-fill-mode: forwards;",setTimeout((()=>{a.style.display="none"}),500)},y=()=>{o.style.cssText="animation: slideDown .5s ease; animation-fill-mode: forwards;",setTimeout((()=>{i.style.display="none"}),500)},S=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],f=["Jan","Feb","Mar","Apr","Mai","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],b=e=>{const t=e.data(),a=new Date(t.date),l=`${S[a.getDay()]} ${a.getDate()}.${f[a.getMonth()]} ${a.getFullYear()}`,n=`\n\t\t\t\t<div class="card card-event card-${t.label}" data-id='${e.id}'>\n\t\t\t\t\t<h4 class='card-title'>${t.title}</h4>\n\t\t\t\t\t<p class='card-description'>${t.description}</p>\n\t\t\t\t\t<p class='card-location'>${t.location}</p>\n\t\t\t\t\t<p class='card-date'> ${l}</p>\n\t\t\t\t\t<div>${t.assign}</div>\n\t\t\t\t\t\x3c!-- <div>${t.label}</div> --\x3e\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button class="btn btn-edit edit-event">Edit</button>\n\t\t\t\t\t\t<button class="btn btn-delete delete-event">Delete</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;r.insertAdjacentHTML("beforeend",n);document.querySelector(`[data-id='${e.id}'] .edit-event`).addEventListener("click",(()=>{i.style.display="flex",o.style.cssText="animation: slideUp .5s ease; animation-fill-mode: forwards;",m=e.id,s.title.value=t.title,s.description.value=t.description,s.location.value=t.location,s.date.value=t.date,s.assign.value=t.assign,s.label.value=t.label}));document.querySelector(`[data-id='${e.id}'] .delete-event`).addEventListener("click",(()=>{v.doc(`${e.id}`).delete().then((()=>{console.log("Document succesfully deleted!")})).catch((e=>{console.log("Error removing document",e)}))}))};u.addEventListener("click",(()=>{a.style.display="flex",l.style.cssText="animation: slideUp .5s ease; animation-fill-mode: forwards;",n.title.value="",n.description.value="",n.location.value="",n.date.value="",n.assign.value="",n.label.value=""})),d.addEventListener("click",(e=>{e.preventDefault(),p()})),c.addEventListener("click",(e=>{e.preventDefault(),y()})),window.addEventListener("click",(e=>{e.target===a&&p(),e.target===i&&y()})),v.onSnapshot((e=>{e.docChanges().forEach((e=>{if("added"===e.type&&setTimeout((()=>{b(e.doc)}),500),"removed"===e.type){let t=document.querySelector(`[data-id='${e.doc.id}']`);t.parentElement.removeChild(t)}if("modified"===e.type){let t=document.querySelector(`[data-id='${e.doc.id}']`);t.parentElement.removeChild(t),b(e.doc)}}))})),n.addEventListener("submit",(e=>{e.preventDefault(),v.add({title:n.title.value,description:n.description.value,location:n.location.value,date:n.date.value,assign:n.assign.value,label:n.label.value}),p()})),s.addEventListener("submit",(e=>{e.preventDefault(),v.doc(m).update({title:s.title.value,description:s.description.value,location:s.location.value,date:s.date.value,assign:s.assign.value,label:s.label.value}),y()}))}}const eventService=new EventService;export default eventService;
//# sourceMappingURL=event-service.js.map